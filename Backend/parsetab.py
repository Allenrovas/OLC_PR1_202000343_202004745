
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftPORDIVleftPARIZQPARDERAND CADENA CORDER CORIZQ DECIMAL DESIGUALDAD DIV DOSPUNTOS ENTERO ID IGUAL IGUALDAD LLAVEDER LLAVEIZQ MAS MAYORIGUAL MAYORQ MENORIGUAL MENORQ MENOS MOD NOT OR PARDER PARIZQ POR POT PTCOMA PUNTO RANY RBOOLEAN RBREAK RCONCAT RCONSOLE RCONTINUE RELSE RFALSE RFOR RFUNCTION RIF RINTERFACE RLET RLOG RNULL RNUMBER RRETURN RSPLIT RSTRING RTOEXPONENTIAL RTOFIXED RTOLOWERCASE RTOSTRING RTRUE RTUPPERCASE RWHILEinit : instruccionesinstrucciones    : instrucciones instruccioninstrucciones : instruccioninstruccion : imprimir PTCOMAimprimir : RCONSOLE PUNTO RLOG PARIZQ expresion PARDERexpresion : expresion MAS expresion\n                | expresion MENOS expresion\n                | expresion POR expresion\n                | expresion DIV expresionexpresion : ENTEROexpresion : DECIMALexpresion : CADENA'
    
_lr_action_items = {'RCONSOLE':([0,2,3,6,7,],[5,5,-3,-2,-4,]),'$end':([1,2,3,6,7,],[0,-1,-3,-2,-4,]),'PTCOMA':([4,15,],[7,-5,]),'PUNTO':([5,],[8,]),'RLOG':([8,],[9,]),'PARIZQ':([9,],[10,]),'ENTERO':([10,16,17,18,19,],[12,12,12,12,12,]),'DECIMAL':([10,16,17,18,19,],[13,13,13,13,13,]),'CADENA':([10,16,17,18,19,],[14,14,14,14,14,]),'PARDER':([11,12,13,14,20,21,22,23,],[15,-10,-11,-12,-6,-7,-8,-9,]),'MAS':([11,12,13,14,20,21,22,23,],[16,-10,-11,-12,-6,-7,-8,-9,]),'MENOS':([11,12,13,14,20,21,22,23,],[17,-10,-11,-12,-6,-7,-8,-9,]),'POR':([11,12,13,14,20,21,22,23,],[18,-10,-11,-12,18,18,-8,-9,]),'DIV':([11,12,13,14,20,21,22,23,],[19,-10,-11,-12,19,19,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,6,]),'imprimir':([0,2,],[4,4,]),'expresion':([10,16,17,18,19,],[11,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','AnalizadorSintactico.py',14),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','AnalizadorSintactico.py',18),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_2','AnalizadorSintactico.py',24),
  ('instruccion -> imprimir PTCOMA','instruccion',2,'p_instrucciones_evaluar','AnalizadorSintactico.py',31),
  ('imprimir -> RCONSOLE PUNTO RLOG PARIZQ expresion PARDER','imprimir',6,'p_imprimir','AnalizadorSintactico.py',35),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',40),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',41),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',42),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_binaria','AnalizadorSintactico.py',43),
  ('expresion -> ENTERO','expresion',1,'p_expresion_entero','AnalizadorSintactico.py',54),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_decimal','AnalizadorSintactico.py',58),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena','AnalizadorSintactico.py',62),
]
